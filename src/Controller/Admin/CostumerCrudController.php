<?php

namespace App\Controller\Admin;

use App\Entity\Costumer;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateTimeField;
use EasyCorp\Bundle\EasyAdminBundle\Field\FormField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IntegerField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextareaField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class CostumerCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Costumer::class;
    }

    public function configureFields(string $pageName): iterable
    {
        return [
            // ID gets autogenerated, dont let it be edited
            IntegerField::new('id')->hideOnForm(),
            // fieldsets usually display only a title
            FormField::addFieldset('User Details'),
            TextField::new('firstName'),
            TextField::new('lastName'),

            // fieldsets without titles only display a separation between fields
            FormField::addFieldset(),
            DateTimeField::new('enddate')->hideOnIndex(),

            // fieldsets can also define their icon, CSS class and help message
            BooleanField::new('active'),

            // hideOnForm() (hides the field both in edit and new pages)
            ImageField::new('Barcode')->hideOnForm()
        ];
    }

    public function configureActions(Actions $actions): Actions
    {
        // These are displayed in reverse order!
        return $actions
            // ->add(Crud::PAGE_INDEX, $secondAction)
            ->add(Crud::PAGE_INDEX, Action::DETAIL);
    }
}
